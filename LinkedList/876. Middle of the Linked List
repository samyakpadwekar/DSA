Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.

Example 1:
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

Example 2:
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 
Constraints:
The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100

---------------------------------------------------------------------------
Time Complexity: O(n)+O(n/2)
Auxiliary Space: O(1).
hint : calculate length and traverse n/2
---------------------------------------------------------------------------

class Solution {
    public ListNode middleNode(ListNode head) {
        int len = getLen(head);
        ListNode temp = head;

        int midIdx = len / 2;
        while (midIdx > 0) {
            temp = temp.next;
            midIdx--;
        }
        return temp;
    }

    int getLen(ListNode head)
    {
        int len = 0;
        ListNode temp = head;
        while (temp != null) {
            len++;
            temp = temp.next;
        }
        return len;
    }
}

---------------------------------------------------------------------------
Time Complexity: O(n/2)
Auxiliary Space: O(1).
hint : two pointer, slow and fast. fast moves twice as fast as slow
---------------------------------------------------------------------------

class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;

        while(fast != null && fast.next !=null)
        {
            fast = fast.next.next;
            slow = slow.next;
        }

        return slow;
    }
}
