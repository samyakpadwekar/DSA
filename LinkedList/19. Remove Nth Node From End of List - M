Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
Output: []

Example 3:
Input: head = [1,2], n = 1
Output: [1]

Constraints:
The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz

---------------------------------------------------------------------------
Time Complexity: O(n)+O(n)
Auxiliary Space: O(1).
hint : calculate length and delete from front
---------------------------------------------------------------------------

public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode trav = head;
        int count = 1;
        while (trav.next != null)
        {
            count++;
            trav = trav.next;
        }
        int pos = count - n;
        trav=head;
        if(pos == 0)
        {
            return head.next;
        }
        for(int i=1;i<pos;i++)
        {
            trav = trav.next;
        }
        trav.next=trav.next.next;
        return head;
}

---------------------------------------------------------------------------
Time Complexity: O(n)
Auxiliary Space: O(1).
hint : Maintain two pointers and update one with a delay of n steps.
---------------------------------------------------------------------------

public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode();
        dummy.next = head;
        ListNode fast = dummy;
        ListNode slow = dummy;

        for(int i=1;i<=n;++i)
            fast=fast.next;

        while(fast.next!=null) {
            fast=fast.next;
            slow=slow.next;
        }

        slow.next = slow.next.next;

        return dummy.next;
}
