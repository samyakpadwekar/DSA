Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.
Example 1: Input: nums = [1,2,3] Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2: Input: nums = [0,1] Output: [[0,1],[1,0]]
Example 3: Input: nums = [1] Output: [[1]]
Constraints:
1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

---------------------------------------------------------------------------

TIME COMPLEXITY : n!*n
n! --> for n!permutations that is being generated
n --> for loop that is going from 0 to n

SPACE COMPLEXITY: n+n
n --> temp array 
n --> freq array
array being returned is ignored


class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans=new ArrayList<>();
        List<Integer> temp= new ArrayList<>();
        boolean[] freq=new boolean[nums.length];
        calPerm(nums,temp,ans,freq);
        return ans;   
    }

    private void calPerm(int[] nums,List<Integer> temp,List<List<Integer>> ans,boolean[] freq)
    {   
        //if temp array size is equal to original array size
        if(temp.size() == nums.length)
        {   
            //add temp array in returning array
            ans.add(new ArrayList(temp));
            return;
        }

        //loop from 0 to n
        for(int i=0;i<nums.length;i++)
        {   
            //check if element is not marked
            if(!freq[i])
            {   
                //mark the element
                freq[i]=true;
                //include the element
                temp.add(nums[i]);
                //call the func again with included element for further elements
                calPerm(nums,temp,ans,freq);
                //remove the element for other combination
                temp.remove(temp.size()-1);
                //also marked the element as not traversed
                freq[i]=false;
            }
        }
    }
}

------------------------------------------------------------------------------
TIME COMPLEXITY : n!*n
n! --> for n!permutations that is being generated
n --> for loop that is going from 0 to n

SPACE COMPLEXITY: 1

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans=new ArrayList<>();
        calPerm(0,nums,ans);
        return ans;   
    }

    private void calPerm(int index,int[] nums,List<List<Integer>> ans)
    {   
        //if index is equal to original arraysize
        if(index == nums.length)
        {   
            //add changed original array in returning array
            List < Integer > ds = new ArrayList < > ();
            for (int i = 0; i < nums.length; i++) {
                ds.add(nums[i]);
            }
            ans.add(new ArrayList < > (ds));
            return;
        }

        //loop from 0 to n
        for(int i=index;i<nums.length;i++)
        {   
            //intuition: swapping each element with every other element
            //so that all element will be at a particular position
            swap(i,index,nums);
            calPerm(index+1,nums,ans);
            swap(i,index,nums);    
        }
    }

    private void swap(int i,int j,int[] nums)
    {
        int t=nums[i];
        nums[i]=nums[j];
        nums[j]=t;
    }
    
}
