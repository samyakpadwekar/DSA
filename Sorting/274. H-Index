Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index.
According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers
that have each been cited at least h times.

Example 1:
Input: citations = [3,0,6,1,5]
Output: 3
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.

Example 2:
Input: citations = [1,3,1]
Output: 1
 
Constraints:
n == citations.length
1 <= n <= 5000
0 <= citations[i] <= 1000

------------------------------------------
Time Complexity : O(maxLen) = O(n)
Space Complexit : O(maxLen) = O(n)
where  maxLen= = n
------------------------------------------
class Solution {
    public int hIndex(int[] citations) {
    //counting sort
    
    //rather than taking array of length of max citation
    //take for max number of papers
    int maxLen=citations.length;    
    int[] count=new int[maxLen+1];

    //count number of paper having i citations
    for(int i=0;i<citations.length;i++)
    {   
        //if any paper has more than maxLen citations
        //count it in maxLen citation
        //ex.paper 3 has 6 citation,it will be included in 
        //paper having maxLen=5 citations
        int idx=citations[i] <= maxLen ? citations[i] : maxLen;
        count[idx]++;
    }

    //left to right cumulative addition will give total papers having utmost(<=) i citation
    //right to left cumulative addition will give total papers having atleast(>=) i citation 
    int citationSum=0;
    for(int i=maxLen;i>=0;i--)
    {
        citationSum+=count[i];
        //return i as soon as we get at least  papers that have each been cited at least i times. 
        if(citationSum>=i)
            return i;
    }

        return -1;
    }
}
-------------------------------------------------
Time Complexity : O(k)
Space COmplexit : O(k)
where k is range of array elements
-------------------------------------------------

class Solution {
    public int hIndex(int[] citations) {
    //counting sort
    int[] count=new int[1001];

    for(int i=0;i<citations.length;i++)
    {
        count[citations[i]]++;
    }

    int citationSum=0;
    for(int i=1000;i>=0;i--)
    {
        citationSum+=count[i];
        if(citationSum>=i)
            return i;
    }

        return -1;
    }
}
