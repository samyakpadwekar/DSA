Given an integer array nums and an integer k, return the kth largest element in the array.
Note that it is the kth largest element in the sorted order, not the kth distinct element.
Can you solve it without sorting?

Example 1:
Input: nums = [3,2,1,5,6,4], k = 2
Output: 5

Example 2:
Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4
 
Constraints:
1 <= k <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4

------------------------------------------------------------------
Time complexity : O(nlogn)
Space Complexity : O(n) -- if stack space is considered else O(1)
------------------------------------------------------------------

class Solution {
    public int findKthLargest(int[] nums, int k) {
        int n=nums.length,l=n-k;
        int low=0,high=n-1;
        
            while (low <= high) {
                int pivot = partition(nums, low, high);
            
                if(pivot==l)
                    return nums[pivot];
            
                else if(pivot < l)
                    low = pivot + 1;
            
                else
                    high = pivot - 1;
            }
        return -1;
    }

   
    private int partition(int[] arr,int low,int high)
    {
        int pivot=arr[high],i=low-1;
        
        for(int j=low;j<=high-1;j++)
        {
            if(arr[j] < pivot)
            {
                i++;
                swap(i,j,arr);
            }
        }
        swap(i+1,high,arr);
        
        return i+1;
    }
    
    private void swap(int i,int j,int[] arr)
    {
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }

}
