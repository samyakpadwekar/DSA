Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3
 
Constraints:
1 <= n <= 10^5
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.

----------------------------------------------------------
Time Complexity : O(n)
Space Complexity : O(1)
--array modified and is slowest
---------------------------------------------------------
//marking elements as negative
class Solution {
    public int findDuplicate(int[] nums) {
        
        for(int i:nums)
        {
            int idx=Math.abs(i);
            if(nums[idx]<0)
                return idx;
            
            nums[idx]=-nums[idx];
        }
        
        return nums.length;
    }
}
----------------------------------------------------------
Time Complexity : O(n)
Space Complexity : O(1)
--array modified but is fast
---------------------------------------------------------
//cycle sort for array elem in rane (1,n)
class Solution {
    public int findDuplicate(int[] nums) {
        int i=0;
        while(i<nums.length)
        {
            int corPos=nums[i]-1;

            if(nums[i]!=nums[corPos])
            {
                int temp=nums[i];
                nums[i]=nums[corPos];
                nums[corPos]=temp;
            }
            else i++;
        }

        for(int k=0;k<nums.length;k++)
        {
            if(nums[k]!=k+1)
            {
                return nums[k];
            }
        }
        return -1;  
    }
}
----------------------------------------------------------
Time Complexity : O(n)
Space Complexity : O(1)
--array not modified
---------------------------------------------------------
//slow and fast pointer
class Solution {
    public int findDuplicate(int[] nums) {
      int slow=nums[0],fast=nums[0];

      do{
          slow=nums[slow];
          fast=nums[nums[fast]];
        }while(slow!=fast);

        slow=nums[0];

        while(slow!=fast)
        {
            slow=nums[slow];
            fast=nums[fast];
        }

        return slow;  
    }
}
