Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:
1 <= intervals.length <= 10^4
intervals[i].length == 2
0 <= starti <= endi <= 10^4

-----------------------------------------
Time Complexity : O(nlogn)
Space COmplexity : O(1)
---------------------------------------

class Solution {
    public int[][] merge(int[][] arr) {
        List<int[]>ans=new ArrayList<>();

        Arrays.sort(arr,new Comparator<int[]>(){
            public int compare(int[] a,int[] b){
                return a[0] - b[0];
            }
        });


        // to keep track of last merged interval
        int res=0;

        for(int i=1;i<arr.length;i++)
        {
//if interval is already in merged interval (i.e.list not empty and end of interval at i is less than end of last merged interval)
            if (!ans.isEmpty() && arr[i][1]<=ans.get(ans.size()-1)[1])
                continue;
            
            //check if 2nd element of last mergest interval if greater than 1st elem of new interval
            if(arr[res][1] >= arr[i][0])
            {   
                //merge if overlapping
                arr[res][1]=Math.max(arr[res][1],arr[i][1]);
                arr[res][0]=Math.min(arr[res][0],arr[i][0]);
            }
            //if interval doesn't overlap with last merged interval
            else
            {   
                //add last merged interval in list
                ans.add(new int[]{arr[res][0],arr[res][1]});
                //increment res
                res++;
                //copy that interval next to the large merged interval
                //i.e. at the res pointer
                arr[res]=arr[i];
            }
        }
        ans.add(new int[]{arr[res][0],arr[res][1]});

//new int[1][] -- will create multiple 2d array with 1 row and n column

//if new int[2][] is used,it will create multiple 2d array in set of 2 rows and n columns and if result only has 1 array then it will second array as null 
//ex : i/p : [[1,4],[4,5]] exp. o/p : [[1,5]] , generated o/p : [[1,5],null]
        return ans.toArray(new int[1][]);
    }
}
