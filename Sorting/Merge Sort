------------------------------------------------------------------
              Time        Space        when?
Worst Case	   O(N logN)	  N logN	      Specific distribution
Average Case	 O(N logN)	  0.74 NlogN	  Average
Best Case	    O(N logN)	  0.50 NlogN	  Already sorted
-------------------------------------------------------------------

//mergesort
class Solution {
    public int[] sortArray(int[] arr) {
         mergeSort(arr,0,arr.length-1);
         return arr;
    }
    private void mergeSort(int arr[],int low,int high)
    {
        if(low < high){
        int mid=(low+high)/2;
        
        mergeSort(arr,low,mid);
        mergeSort(arr,mid+1,high);
        merge(arr,low,mid,high);
        }
    }
    
    private void merge(int[] arr,int low,int mid,int high)
    {
        int left=low;
        int right=mid+1;
        
        ArrayList<Integer> temp=new ArrayList<>();
        
        while(left<=mid && right<=high)
        {
           if(arr[left] <= arr[right])
           {
               temp.add(arr[left++]);
           }
           else
           {
                temp.add(arr[right++]);
           }
        }
        
        while(left<=mid)
        {
            temp.add(arr[left++]);
        }
        
        while(right<=high)
        {
            temp.add(arr[right++]);
        }
        
        for(int i=low;i<=high;i++)
        {
            arr[i]=temp.get(i-low);
        }
    }
}

-----------------------------------------------------------------------

class Solution {
    public int[] sortArray(int[] nums) {
        // Merge Sort
        // TC : O(nlogn)
        mergeSort(nums, 0, nums.length - 1);
        return nums;
    }

    private void mergeSort(int[] arr, int l, int r){
        if(l >= r){
            return;
        }
        int mid = (l + r) / 2;
        mergeSort(arr, l, mid);
        mergeSort(arr, mid + 1, r);
        merge(arr, l, mid, r);
    }

    private void merge(int[] arr, int l, int mid, int r){
        int n1 = mid - l + 1; // arr[l - m]
        int n2 = r - mid;

        int[] left = new int[n1];
        int[] right = new int[n2];

        for(int i = 0; i < n1; i++){
            left[i] = arr[l + i];
        }
        for(int j = 0; j < n2; j++){
            right[j] = arr[mid + 1 + j];
        }

        int i = 0;
        int j = 0;
        int k = l;

        while(i < n1 && j < n2){
            if(left[i] <= right[j]){
                arr[k] = left[i];
                i++;
            }else{
                arr[k] = right[j];
                j++;
            }
            k++;
        }

        while(i < n1){
            arr[k] = left[i];
            i++;
            k++;
        }

        while(j < n2){
            arr[k] = right[j];
            j++;
            k++;
        }
    }
}
--------------------------------------------------------------
