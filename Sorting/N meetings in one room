There is one meeting room in a firm. There are N meetings in the form of (start[i], end[i]) where start[i] is start time of meeting i and end[i] is finish time of meeting i.
What is the maximum number of meetings that can be accommodated in the meeting room when only one meeting can be held in the meeting room at a particular time?

Note: Start time of one chosen meeting can't be equal to the end time of the other chosen meeting.

Example 1:
Input:
N = 6
start[] = {1,3,0,5,8,5}
end[] =  {2,4,6,7,9,9}
Output: 
4
Explanation:
Maximum four meetings can be held with given start and end timings. The meetings are - (1, 2),(3, 4), (5,7) and (8,9)

Example 2:
Input:
N = 3
start[] = {10, 12, 20}
end[] = {20, 25, 30}
Output: 
1
Explanation:
Only one meetings can be held with given start and end timings.

Constraints:
1 ≤ N ≤ 10^5
0 ≤ start[i] < end[i] ≤ 10^5

-------------------------------------------------------
Time Complexity : O(N*LogN)
Auxilliary Space : O(N)
--------------------------------------------------------
class Meeting{
    int start,end,pos;
    
    public Meeting(int start,int end,int pos)
    {
        this.start=start;
        this.end=end;
        this.pos=pos;
    }
}

class meetingComp implements Comparator<Meeting>{
    
    @Override
    public int compare(Meeting m1,Meeting m2)
    {
        if(m1.end<m2.end)
            return -1;
        else if(m1.end>m2.end)
            return 1;
        else if(m1.pos<m2.pos)
            return -1;
        return 1;
    }
}

class Solution 
{

    public static int maxMeetings(int start[], int end[], int n)
    {
        ArrayList<Meeting> meet=new ArrayList<Meeting>();

        //add all sets of meeting in an arraylist
        for(int i=0;i<start.length;i++)
            meet.add(new Meeting(start[i],end[i],i+1));
            
        meetingComp mc=new meetingComp();

        //sort the arraylist
        Collections.sort(meet,mc);

        //keep count=1 as 1st meeting can start as room is empty
        int count=1;

        //end time of last meeting
        int endLimit=meet.get(0).end;

      
        for(int i=1;i<start.length;i++)
        {  
            //check if next meeting is starting after last meeting is ended
            if(meet.get(i).start > endLimit)
            {  
                //add endtime of last meeting
                endLimit=meet.get(i).end;
                //increase count of meetings
                count++;
            }
        }
        
        //return meeting count
        return count;
    }
}
