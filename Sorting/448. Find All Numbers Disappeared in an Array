Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

Example 1:
Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]

Example 2:
Input: nums = [1,1]
Output: [2]
 
Constraints:
n == nums.length
1 <= n <= 105
1 <= nums[i] <= n

----------------------------
Time Complexity : O(n)
Space Complexity: O(1)
----------------------------

//using Cycle sort for elements are in the range of 1 to N or  0 to N
class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
       List<Integer> result=new ArrayList();
        int i=0;
        while(i<nums.length)
        {
            int corPos=nums[i]-1;

            if(i<nums.length && nums[i]!=nums[corPos])
            {
                int temp=nums[i];
                nums[i]=nums[corPos];
                nums[corPos]=temp;
            }
            else i++;
        }

        for(int k=0;k<nums.length;k++)
        {
            if(nums[k]!=k+1)
            {
                result.add(k+1);
            }
        }
        return result;
    }
}
