Given an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k.
The value of |x| is defined as:
x if x >= 0.
-x if x < 0.
 
Example 1:
Input: nums = [1,2,2,1], k = 1
Output: 4

Example 2:
Input: nums = [1,3], k = 3
Output: 0
Explanation: There are no pairs with an absolute difference of 3.

Example 3:
Input: nums = [3,2,1,5,4], k = 2
Output: 3
Explanation: The pairs with an absolute difference of 2 are:

Constraints:
1 <= nums.length <= 200
1 <= nums[i] <= 100
1 <= k <= 99

-----------------------------------------------------
Time complexity : O(k)
Space Complexity : O(k)
where k is range of elements
-----------------------------------------------------

class Solution {
    public int countKDifference(int[] nums, int k) {
       //count sort - range=(1,100)
       int[] count=new int[101];

        //count occurence of each element
       for(int i=0;i<nums.length;i++)
       {
           count[nums[i]]++;
       }

       int res=0;
        //accumulate the product of k-apart counts.
       for(int i=k+1;i<101;i++)
        res+=count[i]*count[i-k];

        return res; 
    }
}
