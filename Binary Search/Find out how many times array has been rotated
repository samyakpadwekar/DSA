Given an ascending sorted rotated array Arr of distinct integers of size N. The array is right rotated K times. Find the value of K.

Example 1:
Input:
N = 5
Arr[] = {5, 1, 2, 3, 4}
Output: 1
Explanation: The given array is 5 1 2 3 4. 
The original sorted array is 1 2 3 4 5. 
We can see that the array was rotated 
1 times to the right.
Example 2:
Input:
N = 5
Arr[] = {1, 2, 3, 4, 5}
Output: 0
Explanation: The given array is not rotated.
Your Task:
Complete the function findKRotation() which takes array arr and size n, as input parameters and returns an integer representing the answer. You don't to print answer or take inputs.

Constraints:
1 <= N <=10^5
1 <= Arr[i] <= 10^7

-------------------------------------------
Time Complexity: O(log(N))
Auxiliary Space: O(1)
-------------------------------------------
hint : index of minimum is the number of times sorted array is rotated

class Solution {
    int findKRotation(int arr[], int n) {
        int low=0,high=n-1,min=Integer.MAX_VALUE,ans=0;
        
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(arr[low]<=arr[mid])
            {
                if(arr[low]<min){
                    min=arr[low];
                    ans=low;
                }
                low=mid+1;
            }
            else
            {
                if(arr[mid]<min)
                {
                    min=arr[mid];
                    ans=mid;
                }
                high=mid-1;
            }
        }
        return ans;
    }
}
