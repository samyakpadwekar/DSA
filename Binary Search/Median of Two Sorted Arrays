Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).

Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 
Constraints:
nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106

-----------------------
Time complexity : O(log(n1))
Space complexity : O(1)
-----------------------

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums2.length < nums1.length)
        {
            return findMedianSortedArrays(nums2,nums1);
        }

        int n1=nums1.length,n2=nums2.length;    
        int low=0,high=n1;

        while(low<=high)
        {   
            //division point for nums1   
            int i1=(low+high)/2;
            //division point for nums2 
            //(as left half and right half should be same and one part is coming from
            //nums1,this formula will give second part)
            int i2=((n1+n2+1)/2) - i1;
            //if element doesn't exist,take min possible value for left half
            //max possible value for second half
            int min1=(i1==n1)? Integer.MAX_VALUE : nums1[i1];
            int min2=(i2==n2)? Integer.MAX_VALUE : nums2[i2];
            int max1=(i1==0) ? Integer.MIN_VALUE : nums1[i1-1];
            int max2=(i2==0) ? Integer.MIN_VALUE : nums2[i2-1];

            //if required div and i1,i2 is calculated,return  
            if(max2<=min1 && max1<=min2)
            {   
                //if total no. of elements are even
                if((n1+n2)%2==0)
                    return (double) (Math.max(max1,max2)+Math.min(min1,min2))/2;
                else 
                //if tot. no. of elements are odd
                    return (double) (Math.max(max1,max2));
            }

            //take left half of i1(need to decrease max1 so that proper div is made)
            else if(min2<max1) high=i1-1;
            //take left half of i2(need to decrease max2 so that proper div is made)
            else low=i1+1;
        }

        return -1;
    }
}
