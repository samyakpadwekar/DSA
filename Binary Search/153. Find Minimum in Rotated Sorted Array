Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:
[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].
Given the sorted rotated array nums of unique elements, return the minimum element of this array.
You must write an algorithm that runs in O(log n) time.

Example 1:
Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
Example 2:
Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
Example 3:
Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 
 
Constraints:
n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
All the integers of nums are unique.
nums is sorted and rotated between 1 and n times.
-----------------------------------------------------------
Time Complexity : O(logn)
Space complexity : O(1)
-----------------------------------------------------------
class Solution {
    public int findMin(int[] nums) {
       int low=0,n=nums.length,high=n-1,min=Integer.MAX_VALUE;

       while(low<=high)
       {
           int mid=low+(high-low)/2;
           //if left half is sorted
           if(nums[low] <= nums[mid])
           {   
               //take min from left half
               min=Math.min(min,nums[low]);
               //eliminate left half
               low=mid+1;
           }
           //if right half is sorted
           else
           {    
               //take min from right half
               min=Math.min(min,nums[mid]);
               //eliminate right half
               high=mid-1;
           }
       }
       return min; 
    }
}
---------------------------------------------------------
class Solution {
    public int findMin(int[] nums) {
        int start=0;
        int end=nums.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(start<mid && nums[mid]<nums[mid-1]){
                return nums[mid];
            }
            if(mid<end && nums[mid]>nums[mid+1]){
                return nums[mid+1];
            }
            if(nums[start]<=nums[mid]){
                start=mid+1;
            }else{
                end=mid-1;
            }
        }
        return nums[0];
    }
}
------------------------------------------------------
class Solution {
    public int findMin(int[] nums) {
        if(nums.length==1) return nums[0];
        int low = 0;
        int upp = nums.length-1;
        int mid = 0;
        int min = 99999;

        while(low<=upp){
            mid =(low+upp)/2;
            if(nums[low] < nums[upp] && nums[low] <min){
                    return nums[low];
            }
            if (nums[mid]>=nums[low]) {
                min = Math.min(min,nums[low]);
                low = mid+1;
            }else{
                min = Math.min(min,nums[mid]);
                upp = mid-1; 
            }
        }
        return min;
    }
}
