Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:
Input: nums = [], target = 0
Output: [-1,-1]
 
Constraints:
0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

--------------
Time Complexity : O(logn)
Space COmplexity : O(1)
--------------

class Solution {
    public int[] searchRange(int[] nums, int target) {
       
       int n=nums.length,low=0,high=n-1;
       int[] arr=new int[]{-1,-1};

       while(low<=high)
       {
           int mid=(low+high)/2;
           if(target > nums[mid]) low=mid+1;
           else if(target < nums[mid]) high=mid-1;
           else
           {
                    arr[0]=mid;
                    high=mid-1;
           }
       }

       low=0;high=n-1;
       
       while(low<=high)
       {
           int mid=(low+high)/2;
           if(target > nums[mid]) low=mid+1;
           else if(target < nums[mid]) high=mid-1;
           else
           {
                    arr[1]=mid;
                    low=mid+1;
           }
       }
       return arr;  
    }
}
