An array arr a mountain if the following properties hold:
arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i] 
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].
You must solve it in O(log(arr.length)) time complexity.

Example 1:
Input: arr = [0,1,0]
Output: 1
Example 2:
Input: arr = [0,2,1,0]
Output: 1
Example 3:
Input: arr = [0,10,5,2]
Output: 1
 
Constraints:
3 <= arr.length <= 10^5
0 <= arr[i] <= 10^6
arr is guaranteed to be a mountain array.

----------------------------------------
Time COmplexity : O(logn)
Space COmplexity : O(1)
----------------------------------------

class Solution {
    public int peakIndexInMountainArray(int[] nums) {
        int n=nums.length;
      
      int low=1,high=n-2;

      while(low<=high)
      {
        int mid=low+(high-low)/2;
        if(nums[mid-1]<nums[mid] && nums[mid]>nums[mid+1])
            return mid;
        else if(nums[mid-1]<nums[mid]) low=mid+1;
        else    high=mid-1;
      }
      return -1;
    }
}
--------------------------------------
class Solution {
    public int peakIndexInMountainArray(int[] nums) {
        int n=nums.length;
      if(n==1 || nums[0]>nums[1])   return 0;
      if(nums[n-1]>nums[n-2])   return n-1;

      int low=1,high=n-2;

      while(low<=high)
      {
        int mid=low+(high-low)/2;
        if(nums[mid-1]<nums[mid] && nums[mid]>nums[mid+1])
            return mid;
        else if(nums[mid-1]<nums[mid]) low=mid+1;
        else    high=mid-1;
      }
      return -1;
    }
}
