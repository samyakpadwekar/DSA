Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

Example 1:
Input: s = "leetcode"
Output: 0

Example 2:
Input: s = "loveleetcode"
Output: 2

Example 3:
Input: s = "aabb"
Output: -1
 
Constraints:
1 <= s.length <= 10^5
s consists of only lowercase English letters.

---------------------------------------------
Time Complexity : O(n)
Space Complexity : O(n)
---------------------------------------------

class Solution {
    public int firstUniqChar(String s) {
        int[] character=new int[26];

        for(int i=0;i<s.length();i++)
          character[s.charAt(i)-'a']++;

        for(int i=0;i<s.length();i++)
            if(character[s.charAt(i)-'a']==1)
                return i;

        return -1;
    }
}

---------------------------------------------
Time Complexity : O(n)
Space Complexity : O(n)
---------------------------------------------
class Solution {
    public int firstUniqChar(String s) {
        int [] freq=new int[26];
        char [] ch=s.toCharArray();
        for(int i=0;i<ch.length;i++)
        {
            freq[ch[i]-'a']++;
        }
        for( int i=0;i<ch.length;i++)
        {
            if(freq[ch[i]-'a']==1)
            return i;
        }
        return -1;
    }
}
