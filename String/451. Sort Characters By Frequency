Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.
Return the sorted string. If there are multiple answers, return any of them.

Example 1:
Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.

Example 2:
Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.

Example 3:
Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

Constraints:
1 <= s.length <= 5 * 10^5
s consists of uppercase and lowercase English letters and digits.

--------------------------------------------------------------------
Time COmplexity : O(NlogN)
Space Complexity : O(N)
--------------------------------------------------------------------

class Solution {
    public String frequencySort(String s) {
    HashMap<Character,Integer> map=new HashMap<>();
      
    // Count the occurence on each character
    for(char i:s.toCharArray())
        map.put(i,map.getOrDefault(i,0)+1);

    // Sorting
	List<Character> chars = new ArrayList(map.keySet());
	Collections.sort(chars, (a, b) -> (map.get(b) - map.get(a)));

	// Build string
	StringBuilder sb = new StringBuilder();
	for (Object c : chars) {
		for (int i = 0; i < map.get(c); i++) {
			sb.append(c);
		}
	}
	return sb.toString(); 
    }
}

--------------------------------------------------------------------
Time COmplexity : O(N)
Space Complexity : O(N)
--------------------------------------------------------------------

class Solution {
    public String frequencySort(String s) {
        int[] chars=new int[128];

        //count each char in char based indexed array
        for(char ch : s.toCharArray()){
          chars[ch]++;
        }

        char c[] = new char[s.length()]; 
        for(int i=0;i<s.length();)
        {
            int max=0;
            int idx=0;

            //find i+1st largest freq char
            for(int j=0;j<128;j++){
            if(chars[j]>max)
            {
                max=chars[j];
                idx=j;
            }
            }

            //put that char in char array and redice its freq
            while(chars[idx]>0)
            {   
                c[i++]=(char)idx;
                chars[idx]--;
                
            }
        }

        return new String(c);

    }
}
