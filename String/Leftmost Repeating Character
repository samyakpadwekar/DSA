Given a string consisting of lowercase english alphabets. Find the repeated character present first in the string.

Example 1:
Input:
S = "geeksforgeeks"
Output: g
Explanation: g, e, k and s are the repeating
characters. Out of these, g occurs first. 

Example 2:
Input: 
S = "abcde"
Output: -1
Explanation: No repeating character present.

Constraints:
1<=|S|<=10^5

---------------------------------------------------
Time Complexity : O(n)
Space Complexity : O(n)
--2 Traversals
---------------------------------------------------

class Solution
{
    char firstRep(String s)
    {
        int[] character=new int[26];

        for(int i=0;i<s.length();i++)
          character[s.charAt(i)-'a']++;

        for(int i=0;i<s.length();i++)
            if(character[s.charAt(i)-'a']>1)
                return s.charAt(i);

        return '#';
    }
}

---------------------------------------------------
Time Complexity : O(n)
Space Complexity : O(n)
--1 Traversal
---------------------------------------------------

class Solution
{
    char firstRep(String s)
    {
        int[] character=new int[26];
        int res=Integer.MAX_VALUE;
        Arrays.fill(character,-1);

        for(int i=0;i<s.length();i++)
        {
            int val=character[s.charAt(i)-'a'];
            
            if(val==-1)
                character[s.charAt(i)-'a']=i;
            else
                res=Math.min(val,res);
        }

        return res==Integer.MAX_VALUE? '#' : s.charAt(res);
    }
}

---------------------------------------------------
Time Complexity : O(n)
Space Complexity : O(n)
--more efficient
---------------------------------------------------

class Solution
{
    char firstRep(String s)
    {
        boolean[] character=new boolean[26];
        
        int res=-1;

        for(int i=s.length()-1;i>=0;i--)
        {
            
            if(character[s.charAt(i)-'a'])
                res=i;
            else
                character[s.charAt(i)-'a']=true;
        }

        return res==-1? '#' : s.charAt(res);
    }
}
