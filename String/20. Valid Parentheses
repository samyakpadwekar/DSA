Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 
Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false
 
Constraints:
1 <= s.length <= 10^4
s consists of parentheses only '()[]{}'.

----------------------------------------------------------------------
Time Complexity : O(n)
Space Complexity : O(n)
--using stack
----------------------------------------------------------------------

class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>(); // create an empty stack
        for (char c : s.toCharArray()) { // loop through each character in the string
            if (c == '(') // if the character is an opening parenthesis
                stack.push(')'); // push the corresponding closing parenthesis onto the stack
            else if (c == '{') // if the character is an opening brace
                stack.push('}'); // push the corresponding closing brace onto the stack
            else if (c == '[') // if the character is an opening bracket
                stack.push(']'); // push the corresponding closing bracket onto the stack
            else if (stack.isEmpty() || stack.pop() != c) // if the character is a closing bracket
                // if the stack is empty (i.e., there is no matching opening bracket) or the top of the stack
                // does not match the closing bracket, the string is not valid, so return false
                return false;
        }
        // if the stack is empty, all opening brackets have been matched with their corresponding closing brackets,
        // so the string is valid, otherwise, there are unmatched opening brackets, so return false
        return stack.isEmpty();
    }
}

----------------------------------------------------------------------
Time Complexity : O(n)
Space Complexity : O(1)
--using char array
----------------------------------------------------------------------

class Solution {
    public boolean isValid(String s) {int size = s.length();
        if ((size & 1) != 0) return false;

        int count = 0;
        char[] chars = new char[size];

        for (char ch : s.toCharArray()) {
            switch (ch) {
                case '(':
                    chars[count++] = ')';
                    continue;

                case '{':
                    chars[count++] = '}';
                    continue;

                case '[':
                    chars[count++] = ']';
                    continue;

                default:
                    if(count == 0 || chars[--count] != ch) return false;
            }
        }
        return count == 0;
    }
}

----------------------------------------------------------------------
Time Complexity : O(n)
Space Complexity : O(1)
----------------------------------------------------------------------

class Solution {
    public boolean isValid(String s) {
            int i=-1;
        
       char []st=new char[s.length()];
       
      
        for(char ch : s.toCharArray())
        {
            if (ch == '(' || ch == '{' || ch == '[')
				st[++i] = ch;
			else
             {
                if(i >= 0 && ((st[i] == '(' && ch == ')') || (st[i] == '{' && ch == '}')
                            || (st[i] == '[' && ch == ']')))
                        
                            i--;
                
               else 
                return false;
            }
        }
        return i==-1;
    }
}
